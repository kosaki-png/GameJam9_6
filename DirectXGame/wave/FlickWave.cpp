#include "FlickWave.h"

using namespace DirectX;

FlickWave::FlickWave()
{
}

FlickWave::~FlickWave()
{
	for (int i = 0; i < TARGET_AMOUNT; i++)
	{
		delete targets[i];
	}

	delete ui;
}

void FlickWave::Initialize(Input* input, Camera* camera)
{
	// uiの初期化
	BaseWave::Initialize(input, camera);

	// ここに初期化処理
	{
		for (int i = 0; i < TARGET_AMOUNT; i++)
		{
			targets[i] = new BaseTarget();
			targets[i]->Initialize("sphere");
			targets[i]->SetPosition({ (float)(i % 5) - 2.0f, (float)(int)(i / 5) - 1 , 0 });
		}
	}
}

void FlickWave::Update()
{
	// ここに更新処理
	{
		// 視線レイの更新
		{
			XMFLOAT3 tmp = camera->GetEye();
			ray.start = XMVectorSet(tmp.x, tmp.y, tmp.z, 1.0f);
			tmp = camera->GetDir();
			ray.dir = XMVectorSet(tmp.x, tmp.y, tmp.z, 1.0f);
		}

		// 全ての的に当たっているか
		bool allColl = false;
		// 的ごとに当たり判定
		for (int i = 0; i < TARGET_AMOUNT; i++)
		{
			// 視線レイと的との当たり判定
			if (Collision::CheckRay2Sphere(ray, targets[i]->GetSphere()))
			{
				if (input->TriggerMouseLeft())
				{
					// 生きているなら殺す
					if (!targets[i]->GetIsDead())
					{
						targets[i]->SetIsDead(true);
						ui->AddScore(10);
						ui->AddCount();
					}
					// 死んでいたならミスカウントを増やす
					else
					{
						ui->AddMiss();
					}
				}

				// どれか一つにでも当たっている
				allColl = true;
			}
		}

		// 全てに当たっていなかったら
		if (!allColl)
		{
			if (input->TriggerMouseLeft())
			{
				// ミスを増やす
				ui->AddMiss();
			}
		}

		// 的の更新
		for (int i = 0; i < TARGET_AMOUNT; i++)
		{
			targets[i]->Update();
		}
	}

	// uiの更新
	BaseWave::Update();
}

void FlickWave::Draw()
{
	// ここに描画処理
	{
		// 的の描画
		for (int i = 0; i < TARGET_AMOUNT; i++)
		{
			targets[i]->Draw();
		}
	}
}

void FlickWave::DrawUi(ID3D12GraphicsCommandList* cmdList)
{
	// uiの描画
	BaseWave::DrawUi(cmdList);
}
